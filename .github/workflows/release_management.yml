name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Version override (leave empty for auto-increment)'
        required: false
        type: string
  push:
    branches:
      - release-branch

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release-branch  # Explicitly checkout release-branch

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event.inputs.version_override }}" != "" ]; then
            echo "new_version=${{ github.event.inputs.version_override }}" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor build <<< "${{ steps.current_version.outputs.current_version }}"
            new_build=$((build + 1))
            NEW_VERSION="${major}.${minor}.${new_build}"
            echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Inject version into HTML
        run: |
          VERSION=${{ steps.version.outputs.new_version }}
          sed -i "s/<meta name=\"version\" content=\".*\" \/>/<meta name=\"version\" content=\"${VERSION}\" \/>/" ./src/index.html

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

      - name: Create and push changes to temporary branch
        run: |
          # Create and checkout a new temporary branch
          git checkout -b temp-pr-branch
          git add package.json ./src/index.html
          git commit -m "Update version to ${{ steps.version.outputs.new_version }}"
          git push -u origin temp-pr-branch --force

      - name: Push changes to release branch
        run: |
          git checkout release-branch
          git cherry-pick temp-pr-branch
          git push origin release-branch

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: temp-pr-branch
          base: main
          delete-branch: true
          title: 'Update main version to ${{ steps.version.outputs.new_version }}'
          body: 'Automated PR to sync version changes from release-branch branch'
          commit-message: 'Sync version updates from release-branch'

      - name: Debug PR Creation
        if: steps.create-pr.outputs.pull-request-number
        run: |
          {
            echo "PR Details:"
            echo "Number: ${{ steps.create-pr.outputs.pull-request-number }}"
            echo "URL: ${{ steps.create-pr.outputs.pull-request-url }}"
            echo "Operation: ${{ steps.create-pr.outputs.pull-request-operation }}"
          } || {
            echo "Error in debug output"
            exit 1
          }

      - name: Enable auto-merge
        if: steps.create-pr.outputs.pull-request-number
        shell: bash
        run: |
          pr_number="${{ steps.create-pr.outputs.pull-request-number }}"
          
          # Wait a short time for PR to be fully created
          sleep 5
          
          # Check if PR is still open
          if gh pr view "$pr_number" --json state -q .state | grep -q "OPEN"; then
            # Approve the PR
            gh pr review "$pr_number" --approve
            # Enable auto-merge
            gh pr merge "$pr_number" --auto --merge
            
            # Wait for merge to complete
            timeout=30
            while [ $timeout -gt 0 ]; do
              if gh pr view "$pr_number" --json mergedAt -q '.mergedAt != null'; then
                echo "PR successfully merged"
                break
              fi
              sleep 2
              timeout=$((timeout - 2))
            done
          else
            echo "PR #$pr_number is not in OPEN state"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN_PRAXIS }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}